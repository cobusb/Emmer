{"source_files":[{"name":"lib/css_builder.ex","source":"defmodule CssBuilder do\n  def build do\n    content_dir = \"content\"\n    templates_dir = \"templates\"\n    output_dir = \"assets/css\"\n\n    # Ensure output directory exists\n    File.mkdir_p!(output_dir)\n\n    # Find all HTML files\n    html_files = find_html_files(content_dir) ++ find_html_files(templates_dir)\n\n    # Extract Tailwind classes from HTML files\n    classes = extract_classes_from_files(html_files)\n\n    # Generate CSS using Tailwind CLI\n    generate_css(classes, output_dir)\n\n    IO.puts(\"✅ CSS built successfully!\")\n    IO.puts(\"📁 Output: #{output_dir}/tailwind.css\")\n    IO.puts(\"🎨 Classes found: #{length(classes)}\")\n  end\n\n  def find_html_files(dir) do\n    if File.dir?(dir) do\n      Path.wildcard(Path.join(dir, \"**/*.html\"))\n    else\n      []\n    end\n  end\n\n  def extract_classes_from_files(files) do\n    files\n    |> Enum.flat_map(&extract_classes_from_file/1)\n    |> Enum.uniq()\n    |> Enum.sort()\n  end\n\n  def extract_classes_from_file(file_path) do\n    case File.read(file_path) do\n      {:ok, content} ->\n        extract_classes_from_content(content)\n      {:error, _} ->\n        []\n    end\n  end\n\n  def extract_classes_from_content(content) do\n    # Extract class attributes\n    class_pattern = ~r/class\\s*=\\s*[\"']([^\"']+)[\"']/\n\n    content\n    |> String.split(\"\\n\")\n    |> Enum.flat_map(fn line ->\n      case Regex.scan(class_pattern, line) do\n        [] -> []\n        matches ->\n          matches\n          |> Enum.map(fn [_, classes] -> classes end)\n          |> Enum.flat_map(&String.split(&1, \" \"))\n      end\n    end)\n    |> Enum.filter(&(&1 != \"\"))\n    |> Enum.uniq()\n  end\n\n  def generate_css(classes, output_dir) do\n    # Create a temporary HTML file with all the classes\n    temp_html = create_temp_html(classes)\n\n    # Use Tailwind CLI to generate CSS\n    System.cmd(\"npx\", [\n      \"tailwindcss\",\n      \"--input\", temp_html,\n      \"--output\", Path.join(output_dir, \"tailwind.css\"),\n      \"--content\", \"content/**/*.html\",\n      \"--content\", \"templates/**/*.html\"\n    ])\n\n    # Clean up temp file\n    File.rm!(temp_html)\n  end\n\n  def create_temp_html(classes) do\n    html_content = \"\"\"\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>Tailwind Classes</title>\n    </head>\n    <body>\n      <div class=\\\"#{Enum.join(classes, \" \")}\\\">\\n        <!-- All classes used in the project -->\\n      </div>\n    </body>\n    </html>\n    \"\"\"\n\n    temp_file = Path.join(System.tmp_dir!(), \"tailwind-classes.html\")\n    File.write!(temp_file, html_content)\n    temp_file\n  end\nend","coverage":[null,null,0,0,0,null,null,0,null,null,0,null,null,0,null,null,0,null,0,0,0,null,null,null,3,2,null,null,null,null,null,null,null,null,null,1,null,null,null,3,null,2,1,null,null,null,null,null,null,6,null,null,null,null,28,16,null,null,12,12,null,null,26,6,null,null,null,null,0,null,null,0,null,null,null,null,null,null,null,null,0,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,1,1,1,null,null]},{"name":"lib/site_emmer.ex","source":"defmodule SiteEmmer do\n  @moduledoc \"\"\"\n  A comprehensive static site generator that crawls folders for HTML and YAML files,\n  matches them up, and generates content using Solid templating.\n  \"\"\"\n\n  def build(opts \\\\ []) do\n    source_dir = Keyword.get(opts, :source_dir, \"content\")\n    output_dir = Keyword.get(opts, :output_dir, \"dist\")\n    templates_dir = Keyword.get(opts, :templates_dir, \"templates\")\n    assets_dir = Keyword.get(opts, :assets_dir, \"assets\")\n    verbose = Keyword.get(opts, :verbose, false)\n\n    if verbose do\n      IO.puts(\"🚀 Building static site...\")\n      IO.puts(\"📁 Source: #{source_dir}\")\n      IO.puts(\"📁 Output: #{output_dir}\")\n      IO.puts(\"📁 Templates: #{templates_dir}\")\n      IO.puts(\"📁 Assets: #{assets_dir}\")\n    end\n\n    # Ensure output directory exists\n    File.mkdir_p!(output_dir)\n\n    # Load global site data\n    site_data = load_site_data(source_dir, verbose)\n\n    # Load templates\n    templates = load_templates(templates_dir, verbose)\n\n    # Find all content files\n    content_files = find_all_content_files(source_dir, verbose)\n\n    # Build each page\n    Enum.each(content_files, fn {html_file, yaml_file} ->\n      build_page(html_file, yaml_file, site_data, templates, output_dir, verbose)\n    end)\n\n    # Copy static assets\n    copy_static_assets(source_dir, output_dir, assets_dir, verbose)\n\n    # Generate sitemap\n    generate_sitemap(content_files, output_dir, site_data, verbose)\n\n    if verbose do\n      IO.puts(\"✅ Site built successfully!\")\n    end\n  end\n\n  def load_site_data(source_dir, verbose \\\\ false) do\n    site_yaml_path = Path.join(source_dir, \"site.yaml\")\n\n    if File.exists?(site_yaml_path) do\n      if verbose, do: IO.puts(\"📄 Loading site data from #{site_yaml_path}\")\n      load_yaml(site_yaml_path)\n    else\n      if verbose, do: IO.puts(\"⚠️  No site.yaml found, using empty site data\")\n      %{}\n    end\n  end\n\n  def load_templates(templates_dir, verbose \\\\ false) do\n    if File.dir?(templates_dir) do\n      if verbose, do: IO.puts(\"📄 Loading templates from #{templates_dir}\")\n\n      templates_dir\n      |> File.ls!()\n      |> Enum.filter(&String.ends_with?(&1, \".html\"))\n      |> Enum.map(fn file ->\n        name = Path.basename(file, \".html\")\n        content = File.read!(Path.join(templates_dir, file))\n        if verbose, do: IO.puts(\"  📄 Loaded template: #{name}\")\n        {name, content}\n      end)\n      |> Map.new()\n    else\n      if verbose, do: IO.puts(\"⚠️  No templates directory found\")\n      %{}\n    end\n  end\n\n  def find_all_content_files(source_dir, verbose \\\\ false) do\n    if File.dir?(source_dir) do\n      if verbose, do: IO.puts(\"🔍 Scanning for content files...\")\n\n      # First, look for files directly in the source directory\n      direct_files = find_files_in_directory(source_dir, verbose)\n\n      # Then, look for files in subdirectories\n      subdir_files = source_dir\n      |> File.ls!()\n      |> Enum.filter(fn item ->\n        item_path = Path.join(source_dir, item)\n        File.dir?(item_path)\n      end)\n      |> Enum.flat_map(fn subdir ->\n        subdir_path = Path.join(source_dir, subdir)\n        find_files_in_directory(subdir_path, verbose)\n      end)\n\n      # Combine both\n      direct_files ++ subdir_files\n    else\n      if verbose, do: IO.puts(\"⚠️  No source directory found\")\n      []\n    end\n  end\n\n  def find_files_in_directory(dir_path, verbose \\\\ false) do\n    case File.ls(dir_path) do\n      {:ok, files} ->\n        html_files = Enum.filter(files, &String.ends_with?(&1, \".html\"))\n        _yaml_files = Enum.filter(files, &String.ends_with?(&1, \".yaml\"))\n\n        Enum.flat_map(html_files, fn html_file ->\n          html_path = Path.join(dir_path, html_file)\n          base_name = Path.basename(html_file, \".html\")\n\n          yaml_file = base_name <> \".yaml\"\n          yaml_path = Path.join(dir_path, yaml_file)\n\n          yaml_exists = File.exists?(yaml_path)\n\n          if verbose do\n            IO.puts(\"  📄 Found: #{html_file}\")\n            if yaml_exists, do: IO.puts(\"    📄 Data: #{yaml_file}\")\n          end\n\n          [{html_path, if(yaml_exists, do: yaml_path, else: nil)}]\n        end)\n\n      {:error, reason} ->\n        if verbose, do: IO.puts(\"❌ Error reading directory #{dir_path}: #{reason}\")\n        []\n    end\n  end\n\n  def build_page(html_file, yaml_file, site_data, templates, output_dir, verbose \\\\ false) do\n    # Load page-specific data\n    page_data = if yaml_file, do: load_yaml(yaml_file), else: %{}\n\n    # Load HTML content\n    html_content = File.read!(html_file)\n\n    # Extract layout and content\n    {layout_name, content} = extract_layout_and_content(html_content)\n\n    # Merge all data - extract page data from YAML\n    context = Map.merge(site_data, %{\n      \"page\" => Map.get(page_data, \"page\", %{}),\n      \"content\" => content,\n      \"current_year\" => Date.utc_today().year\n    })\n\n    # Determine output path\n    # Extract the subdirectory name from the content path\n    # For /tmp/emmer_test/content/simple/index.html, we want \"simple/index.html\"\n    parts = Path.split(html_file)\n    # Find the index of \"content\" in the path\n    content_index = Enum.find_index(parts, fn part -> part == \"content\" end)\n    {output_path, relative_path} =\n      if content_index do\n        # Get everything after \"content\"\n        relative_parts = Enum.drop(parts, content_index + 1)\n        relative_path = Path.join(relative_parts)\n        {Path.join(output_dir, relative_path), relative_path}\n      else\n        # Fallback: use the filename\n        filename = Path.basename(html_file)\n        {Path.join(output_dir, filename), filename}\n      end\n\n    # Ensure output directory exists\n    output_dir_path = Path.dirname(output_path)\n    File.mkdir_p!(output_dir_path)\n\n    # Render with layout if specified\n    rendered_content = if layout_name && Map.has_key?(templates, layout_name) do\n      layout_template = Map.get(templates, layout_name)\n      render_with_layout(layout_template, content, context, templates)\n    else\n      render_content(content, context, templates)\n    end\n\n    # Write output file\n    File.write!(output_path, rendered_content)\n\n    if verbose do\n      IO.puts(\"✅ Built: #{relative_path}\")\n    end\n  end\n\n  def extract_layout_and_content(html_content) do\n    case Regex.run(~r/{%\\s*layout\\s+\"([^\"]+)\"\\s*%}(.*)/s, html_content) do\n      [_, layout_name, content] ->\n        # Strip .html extension to match template loading\n        clean_layout_name = Path.basename(layout_name, \".html\")\n        {clean_layout_name, String.trim(content)}\n      nil ->\n        {nil, html_content}\n    end\n  end\n\n  def render_with_layout(layout_template, content, context, templates) do\n    # Replace content placeholder in layout\n    layout_with_content = String.replace(layout_template, \"{{ content }}\", content)\n\n    # Render the layout with content\n    render_template(layout_with_content, context, templates)\n  end\n\n  def render_content(content, context, templates) do\n    render_template(content, context, templates)\n  end\n\n  def render_template(template, context, templates) do\n    # Process includes first\n    template_with_includes = process_includes(template, context, templates)\n\n    # Parse and render with Solid\n    {:ok, parsed_template} = Solid.parse(template_with_includes)\n    Solid.render!(parsed_template, context)\n  end\n\n  def process_includes(template, context, templates) do\n    Regex.replace(~r/{%\\s*include\\s+\"([^\"]+)\"\\s*%}/, template, fn _, include_name ->\n      # Strip .html extension to match template loading\n      clean_include_name = Path.basename(include_name, \".html\")\n      include_template = Map.get(templates, clean_include_name, \"\")\n      if include_template != \"\" do\n        # Render the include template with the same context\n        {:ok, parsed_include} = Solid.parse(include_template)\n        Solid.render!(parsed_include, context)\n      else\n        \"\"\n      end\n    end)\n  end\n\n  def load_yaml(path) do\n    path\n    |> File.read!()\n    |> YamlElixir.read_from_string!()\n  end\n\n  def copy_static_assets(source_dir, output_dir, assets_dir, verbose \\\\ false) do\n    # Ensure output directory exists\n    File.mkdir_p!(output_dir)\n\n    static_dirs = [\"images\", \"css\", \"js\", \"assets\", \"fonts\", \"downloads\"]\n\n    Enum.each(static_dirs, fn dir ->\n      source_path = Path.join(source_dir, dir)\n      output_path = Path.join(output_dir, dir)\n\n      if File.dir?(source_path) do\n        File.cp_r!(source_path, output_path)\n        if verbose, do: IO.puts(\"📁 Copied: #{dir}/\")\n      end\n    end)\n\n    # Copy assets directory if it exists\n    assets_source = Path.join(source_dir, assets_dir)\n    assets_output = Path.join(output_dir, assets_dir)\n\n    if File.dir?(assets_source) do\n      File.cp_r!(assets_source, assets_output)\n      if verbose, do: IO.puts(\"📁 Copied: #{assets_dir}/\")\n    end\n  end\n\n  def generate_sitemap(content_files, output_dir, site_data, verbose \\\\ false) do\n    base_url = Map.get(site_data, \"site\", %{})[\"url\"] || \"https://example.com\"\n\n    urls = Enum.map(content_files, fn {html_file, _} ->\n      # Extract the directory name from the file path\n      # For paths like \"/tmp/emmer_test/home/index.html\", we want \"home\"\n      parts = Path.split(html_file)\n      # Find the directory name (second to last part for index.html files)\n      dir_name = Enum.at(parts, -2)\n      url_path = \"/\" <> dir_name\n      ~s(        <url>\\n          <loc>#{base_url}#{url_path}</loc>\\n          <lastmod>#{Date.utc_today()}</lastmod>\\n        </url>)\n    end) |> Enum.join(\"\\n\")\n\n    sitemap_content = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<urlset xmlns=\\\"http://www.sitemaps.org/schemas/sitemap/0.9\\\">\\n#{urls}\\n</urlset>\\n\"\n\n    # Ensure output directory exists\n    File.mkdir_p!(output_dir)\n\n    sitemap_path = Path.join(output_dir, \"sitemap.xml\")\n    File.write!(sitemap_path, sitemap_content)\n\n    if verbose do\n      IO.puts(\"🗺️  Generated: sitemap.xml\")\n    end\n  end\n\n  def main(args \\\\ []) do\n    {opts, _, _} = OptionParser.parse(args,\n      strict: [\n        source_dir: :string,\n        output_dir: :string,\n        templates_dir: :string,\n        assets_dir: :string,\n        verbose: :boolean\n      ],\n      aliases: [\n        s: :source_dir,\n        o: :output_dir,\n        t: :templates_dir,\n        a: :assets_dir,\n        v: :verbose\n      ]\n    )\n\n    build(opts)\n  end\n\n  def watch(opts \\\\ []) do\n    source_dir = Keyword.get(opts, :source_dir, \"content\")\n    templates_dir = Keyword.get(opts, :templates_dir, \"templates\")\n\n    IO.puts(\"👀 Watching for changes in #{source_dir} and #{templates_dir}\")\n    IO.puts(\"Press Ctrl+C to stop watching\")\n\n    # Initial build\n    build(opts)\n\n    # Watch for changes\n    FileSystem.start_link(dirs: [source_dir, templates_dir])\n    FileSystem.subscribe(self())\n\n    watch_loop(opts)\n  end\n\n  defp watch_loop(opts) do\n    receive do\n      {:file_event, _pid, {path, _events}} ->\n        if String.ends_with?(path, [\".html\", \".yaml\"]) do\n          IO.puts(\"🔄 File changed: #{path}\")\n          build(opts)\n        end\n        watch_loop(opts)\n\n      {:file_event, _pid, :stop} ->\n        IO.puts(\"👋 Stopping file watcher\")\n    end\n  end\nend\n\ndefmodule Mix.Tasks.Emmer.New do\n  use Mix.Task\n  @shortdoc \"Creates a new Emmer static site project with DaisyUI and deploy workflow.\"\n\n  @moduledoc \"\"\"\n  mix emmer.new <project_name>\n\n  Creates a new Emmer static site project with DaisyUI, dark/light mode, and a deploy workflow (rsync/scp example).\n  \"\"\"\n\n  @impl true\n  def run([project_name]) do\n    base = Path.expand(project_name)\n    File.mkdir_p!(base)\n    File.cd!(base, fn ->\n      create_structure()\n      create_templates()\n      create_content()\n      create_assets()\n      create_github_workflow()\n      create_readme(project_name)\n    end)\n    Mix.shell().info(\"\\nProject '#{project_name}' created!\\n\\nTo get started:\\n  cd #{project_name}\\n  mix deps.get\\n  ./bin/build\\n\")\n  end\n\n  defp create_structure do\n    File.mkdir_p!(\"content/home\")\n    File.mkdir_p!(\"content/about\")\n    File.mkdir_p!(\"content/blog\")\n    File.mkdir_p!(\"content/contact\")\n    File.mkdir_p!(\"templates\")\n    File.mkdir_p!(\"assets/js\")\n    File.mkdir_p!(\"assets/css\")\n    File.mkdir_p!(\".github/workflows\")\n  end\n\n  defp create_templates do\n    File.write!(\"templates/layout.html\", layout_template())\n    File.write!(\"templates/header.html\", header_template())\n    File.write!(\"templates/footer.html\", footer_template())\n  end\n\n  defp create_content do\n    File.write!(\"content/home/index.html\", \"{% layout \\\"layout.html\\\" %}\\n<h1 class=\\\"text-4xl font-bold mb-4\\\">Welcome to {{ site.name }}</h1>\\n<p>This is your new Emmer site. Edit content/home/index.html to get started.</p>\\n\")\n    File.write!(\"content/home/index.yaml\", \"page:\\n  title: Home\\n\")\n    File.write!(\"content/about/index.html\", \"{% layout \\\"layout.html\\\" %}\\n<h1 class=\\\"text-3xl font-bold mb-4\\\">About Us</h1>\\n<p>We are an awesome team using Emmer and DaisyUI!</p>\\n\")\n    File.write!(\"content/about/index.yaml\", \"page:\\n  title: About Us\\n\")\n    File.write!(\"content/blog/index.html\", \"{% layout \\\"layout.html\\\" %}\\n<h1 class=\\\"text-3xl font-bold mb-4\\\">Blog</h1>\\n<p>Stay tuned for updates.</p>\\n\")\n    File.write!(\"content/blog/index.yaml\", \"page:\\n  title: Blog\\n\")\n    File.write!(\"content/contact/index.html\", \"{% layout \\\"layout.html\\\" %}\\n<h1 class=\\\"text-3xl font-bold mb-4\\\">Contact Us</h1>\\n<p>Email: <a href=\\\"mailto:info@example.com\\\" class=\\\"link\\\">info@example.com</a></p>\\n\")\n    File.write!(\"content/contact/index.yaml\", \"page:\\n  title: Contact Us\\n\")\n    File.write!(\"content/site.yaml\", \"site:\\n  name: \\\"My Emmer Site\\\"\\n  description: \\\"A static site generated with Emmer and DaisyUI\\\"\\n\")\n  end\n\n  defp create_assets do\n    File.write!(\"assets/js/theme-toggle.js\", js_toggle())\n    File.write!(\"assets/css/tailwind.css\", tailwind_cdn())\n  end\n\n  defp create_github_workflow do\n    File.write!(\".github/workflows/deploy.yml\", deploy_workflow())\n  end\n\n  defp create_readme(project_name) do\n    File.write!(\"README.md\", \"# #{project_name}\\n\\nGenerated with Emmer.\\n\\nSee .github/workflows/deploy.yml for deployment setup.\\n\")\n  end\n\n  defp layout_template do\n    \"\"\"\n<!DOCTYPE html>\n<html lang=\\\"en\\\" data-theme=\\\"light\\\">\n<head>\n  <meta charset=\\\"UTF-8\\\">\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n  <title>{{ page.title }} - {{ site.name }}</title>\n  <link href=\\\"/assets/css/tailwind.css\\\" rel=\\\"stylesheet\\\">\n  <script src=\\\"/assets/js/theme-toggle.js\\\" defer></script>\n</head>\n<body class=\\\"bg-base-100 text-base-content\\\">\n  {% include \\\"header.html\\\" %}\n  <main class=\\\"container mx-auto px-4 py-8\\\">\n    {{ content }}\n  </main>\n  {% include \\\"footer.html\\\" %}\n</body>\n</html>\n\"\"\"\n  end\n\n  defp header_template do\n    \"\"\"\n<header class=\\\"navbar bg-base-200\\\">\n  <div class=\\\"flex-1\\\">\n    <a class=\\\"btn btn-ghost text-xl\\\" href=\\\"/\\\">{{ site.name }}</a>\n  </div>\n  <div class=\\\"flex-none\\\">\n    <button id=\\\"theme-toggle\\\" class=\\\"btn btn-square btn-ghost\\\" aria-label=\\\"Toggle dark mode\\\">\n      <svg id=\\\"theme-icon\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" stroke=\\\"currentColor\\\" class=\\\"w-6 h-6\\\"></svg>\n    </button>\n  </div>\n</header>\n<nav class=\\\"menu menu-horizontal bg-base-100 rounded-box p-2 mb-4\\\">\n  <a class=\\\"menu-item btn btn-ghost\\\" href=\\\"/\\\">Home</a>\n  <a class=\\\"menu-item btn btn-ghost\\\" href=\\\"/about/\\\">About</a>\n  <a class=\\\"menu-item btn btn-ghost\\\" href=\\\"/blog/\\\">Blog</a>\n  <a class=\\\"menu-item btn btn-ghost\\\" href=\\\"/contact/\\\">Contact</a>\n</nav>\n\"\"\"\n  end\n\n  defp footer_template do\n    \"\"\"\n<footer class=\\\"footer p-4 bg-base-200 text-base-content footer-center\\\">\n  <div>\n    <p>© {{ current_year }} {{ site.name }}. Powered by <a href=\\\"https://github.com/cobusb/Emmer\\\" class=\\\"link\\\">Emmer</a>.</p>\n  </div>\n</footer>\n\"\"\"\n  end\n\n  defp js_toggle do\n    \"\"\"\n// DaisyUI dark/light mode toggle\nconst themeToggle = document.getElementById('theme-toggle');\nconst themeIcon = document.getElementById('theme-icon');\nconst html = document.documentElement;\n\nfunction setTheme(theme) {\n  html.setAttribute('data-theme', theme);\n  localStorage.setItem('theme', theme);\n  themeIcon.innerHTML = theme === 'dark'\n    ? '<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 3v1m0 16v1m8.66-13.66l-.71.71M4.05 19.95l-.71.71M21 12h-1M4 12H3m16.95 4.95l-.71-.71M6.34 6.34l-.71-.71M12 5a7 7 0 100 14 7 7 0 000-14z\" />'\n    : '<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 3v1m0 16v1m8.66-13.66l-.71.71M4.05 19.95l-.71.71M21 12h-1M4 12H3m16.95 4.95l-.71-.71M6.34 6.34l-.71-.71M12 5a7 7 0 100 14 7 7 0 000-14z\" />';\n}\n\nif (themeToggle) {\n  themeToggle.addEventListener('click', () => {\n    const current = html.getAttribute('data-theme');\n    setTheme(current === 'dark' ? 'light' : 'dark');\n  });\n  // On load\n  setTheme(localStorage.getItem('theme') || 'light');\n}\n\"\"\"\n  end\n\n  defp tailwind_cdn do\n    \"\"\"\n@import url('https://cdn.jsdelivr.net/npm/daisyui@4.10.2/dist/full.css');\n\"\"\"\n  end\n\n  defp deploy_workflow do\n    \"\"\"\nname: Deploy Static Site\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      - name: Set up Elixir\n        uses: erlef/setup-beam@v1\n        with:\n          elixir-version: '1.18.4'\n          otp-version: '26.0'\n      - name: Install dependencies\n        run: |\n          mix local.hex --force\n          mix local.rebar --force\n          mix deps.get\n      - name: Build site\n        run: |\n          elixir -e \"SiteEmmer.build()\"\n      - name: Deploy to server (rsync)\n        env:\n          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}\n          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}\n          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}\n        run: |\n          rsync -avz --delete dist/ $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH\n\"\"\"\n  end\nend","coverage":[null,null,null,null,null,null,null,4,4,4,4,4,null,4,1,1,1,1,1,null,null,null,4,null,null,4,null,null,4,null,null,4,null,null,4,5,null,null,null,4,null,null,4,null,4,1,null,null,null,null,6,null,6,2,2,null,4,4,null,null,null,null,4,4,null,null,null,4,null,4,4,4,null,null,4,null,0,0,null,null,null,null,4,4,null,null,4,null,null,4,null,null,6,6,null,null,5,5,null,null,null,4,null,0,null,null,null,null,null,10,null,10,10,null,10,6,6,null,6,6,null,6,null,6,1,1,null,null,6,null,null,null,0,null,null,null,null,null,null,9,null,null,9,null,null,9,null,null,9,null,null,9,null,null,null,null,null,9,null,9,9,9,null,9,9,null,null,null,0,null,null,null,null,9,9,null,null,9,7,7,null,2,null,null,null,9,null,9,1,null,null,null,null,10,null,null,8,null,2,null,null,null,null,null,null,8,null,null,8,null,null,null,2,null,null,null,null,10,null,null,10,10,null,null,null,11,null,7,7,7,null,7,7,null,null,null,null,null,null,null,null,null,6,null,null,null,null,6,null,6,null,6,36,36,null,36,6,6,null,null,null,null,6,6,null,6,1,1,null,null,null,null,5,null,5,null,null,7,null,7,7,7,null,null,5,null,null,5,null,5,5,null,5,1,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,0,0,null,0,0,null,null,0,null,null,0,0,null,0,null,null,null,0,null,0,0,0,null,0,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,1,1,1,1,1,null,1,null,null,null,1,1,1,1,1,1,1,1,null,null,null,1,1,1,null,null,null,1,1,1,1,1,1,1,1,1,null,null,null,1,1,null,null,null,1,null,null,null,1,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}]}